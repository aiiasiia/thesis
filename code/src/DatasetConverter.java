/**
  * DatasetConverter.java
  * Reads files generated by DatasetGenerator.java and creates a FASTA-format version.
  * If target filename is not specified, this will create a copy in a folder named /FASTA.
  *
  * @author Juliet Nabos
  * @version 2.1 3/02/2014
  */

import java.util.*;
import java.io.*;

public class DatasetConverter {
	static int t, n, l, d;
	static int[] alignment;
	static String plantedMotif;
	static String[] sequences, occurrences;

	public static void main(String args[]) throws Exception {
		int[] lValues = {13,14,15,16,17};
		int[] dValues = {4,4,5,5,6};

		String filename = args[0];
		readInput( filename );
		if(args.length > 1)
			writeOutput( args[1] );
		else
			writeOutput( "FASTA/" + filename );
		System.out.println("Converted " + filename);
	}

	public static void readInput(String filename) throws Exception {
		Scanner input = new Scanner (new File (filename ));
		t = input.nextInt();		
		n = input.nextInt();		
		l = input.nextInt();
		d = input.nextInt();
		alignment = new int[t];

		int a = 0;
		while (input.hasNextInt() && a < t) {	
			alignment[a] = input.nextInt();
			a++;
		}
		plantedMotif = input.next().toUpperCase();
		System.out.println(plantedMotif);


		sequences = new String[t];
		occurrences = new String[t];
		a = 0;
		while (input.hasNext() && a < t) {
			String seq = input.next().toUpperCase();
			sequences[a] = seq;
			occurrences[a] = seq.substring( alignment[a], alignment[a] + l );
			a++;
		}
		input.close();
	}

	public static void writeOutput(String filename) throws Exception {
		PrintStream output = new PrintStream( new File(filename) );
		for(int i=0; i < t; i++) {
			output.println("> " + i + " Motif " + plantedMotif + " planted as " + occurrences[i] + " at position " + alignment[i] + ".");
			output.println(sequences[i]);
		}
		output.close();
	}

}